/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dvtproject;


import java.time.*;
import java.time.format.DateTimeParseException;
/**
 *
 * @author Michael
 */
public class FrmName extends javax.swing.JFrame {

    /**
     * Creates new form FrmName
     */
    public FrmName() {
        initComponents();
        clearAllErrorLables();
    }
    
    
    public void clearAllErrorLables(){
        lblErrorDateTransmitted.setText("");
        lblErrorPacketCount.setText("");
        lblErrorPacketString.setText("");
        lblErrorScrambled.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrpScrambled = new javax.swing.ButtonGroup();
        pnlForm = new javax.swing.JPanel();
        lblPacketString = new javax.swing.JLabel();
        txtRadioPacket = new javax.swing.JTextField();
        lblPacketLength = new javax.swing.JLabel();
        spnLength = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        rbtnTrue = new javax.swing.JRadioButton();
        rbtnFalse = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        lblErrorPacketString = new javax.swing.JLabel();
        lblErrorPacketCount = new javax.swing.JLabel();
        lblErrorScrambled = new javax.swing.JLabel();
        lblErrorDateTransmitted = new javax.swing.JLabel();
        dpDateTransmited = new com.github.lgooddatepicker.components.DatePicker();
        btnValidate = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Radio Paket Checker");

        pnlForm.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), null));

        lblPacketString.setText("Message");

        txtRadioPacket.setToolTipText("Paste the radio packet string here");
        txtRadioPacket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRadioPacketActionPerformed(evt);
            }
        });

        lblPacketLength.setText("Packets in message");

        spnLength.setModel(new javax.swing.SpinnerNumberModel(0, 0, 32, 1));

        jLabel1.setText("Scrambled");

        btngrpScrambled.add(rbtnTrue);
        rbtnTrue.setText("True");

        btngrpScrambled.add(rbtnFalse);
        rbtnFalse.setText("False");

        jLabel2.setText("Date Transmitted");

        lblErrorPacketString.setText("jLabel3");

        lblErrorPacketCount.setText("jLabel4");

        lblErrorScrambled.setText("jLabel5");

        lblErrorDateTransmitted.setText("jLabel6");

        javax.swing.GroupLayout pnlFormLayout = new javax.swing.GroupLayout(pnlForm);
        pnlForm.setLayout(pnlFormLayout);
        pnlFormLayout.setHorizontalGroup(
            pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPacketString)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(lblPacketLength))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRadioPacket, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlFormLayout.createSequentialGroup()
                        .addComponent(rbtnTrue)
                        .addGap(18, 18, 18)
                        .addComponent(rbtnFalse))
                    .addComponent(dpDateTransmited, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblErrorPacketCount)
                    .addComponent(lblErrorPacketString)
                    .addComponent(lblErrorScrambled)
                    .addComponent(lblErrorDateTransmitted))
                .addGap(23, 23, 23))
        );
        pnlFormLayout.setVerticalGroup(
            pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFormLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblErrorPacketString, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPacketString, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtRadioPacket)))
                .addGap(6, 6, 6)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFormLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblErrorPacketCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPacketLength, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spnLength)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFormLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(lblErrorScrambled, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbtnTrue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbtnFalse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblErrorDateTransmitted, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dpDateTransmited, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
        );

        btnValidate.setText("VALIDATE PACKET");
        btnValidate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidateActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblTitle.setText("Manaul Radio Message Validator");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(btnValidate))
                    .addComponent(pnlForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(pnlForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnValidate)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnValidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidateActionPerformed
        checkPresence();
        
    }//GEN-LAST:event_btnValidateActionPerformed

    private static void checkRadioString(){
    
        
        
}
    
    
    private boolean checkRadioString(String message) {
        
        
        if(message.length() < 12){
            lblErrorPacketString.setText("The message is shorter than the minimum physically possible length");
            
            return false;
        }
        
        if(! (message.charAt(0) == '<')){
            lblErrorPacketString.setText("The first character must be '<'");
            
            return false;
            
        }
        if(! (message.charAt(message.length()-1) == '>')){
            lblErrorPacketString.setText("The final character must be '>'");
            
            return false;
            
        }
        
        for (int i = 0; i < message.length(); i++) {
            char ch = message.charAt(i);
            System.out.println(ch);
            if (!isAllowedCharacter(ch)) {
                System.out.println("Invalid character '" + ch + "' at position " + i++);
                
                lblErrorPacketString.setText("Invalid character '" + ch + "' at position " + i++);
                return false;
            }
        }
        
        
        if(!checkForDatePacket()){
      
                return false;
        }
        System.out.println("Returning True");
        
                return true;
    }
    
    private static boolean isAllowedCharacter(char ch) {
      final char[] ALLOWED_CHARACTERS = {
      
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
        'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
        'U', 'V', 'W', 'X', 'Y', 'Z',
        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
        'u', 'v', 'w', 'x', 'y', 'z', '<', '>', '/', '_'
    };
         
        for (char allowedChar : ALLOWED_CHARACTERS) {
            if (allowedChar == ch) {
                return true;
            }
        }
        return false;
    }
    
    public boolean checkForDatePacket(){
       String radioMessage = txtRadioPacket.getText();
       String datePacket = radioMessage.substring(radioMessage.length()-11, radioMessage.length()-1);
        System.out.println("datePacket:" + datePacket);
        if(!validateDate( datePacket)){
            return false;
        }
     return true;   
    }
    
   private boolean validateDate(String dateStr){
       
       String dayStr = dateStr.substring(0,2);
       String monthStr = dateStr.substring(3,5);
       String yearStr = dateStr.substring(6,10);
       
       try{
           System.out.println(yearStr+"-"+monthStr+"-"+dayStr);
           LocalDate packetDate = LocalDate.parse(yearStr+"-"+monthStr+"-"+dayStr);
            System.out.println(packetDate);
       }catch(DateTimeParseException e){
           lblErrorPacketString.setText("The date is not valid, or in the incorrect place. The date should be in the format dd/mm/yyyy");
           System.err.println("The date is not valid. The date should be in the format dd/mm/yyyy");
           return false;
       }
      
       
       return true;
   }
   private boolean balancePackets(){
       System.out.println("BALANCE PACKETS");
       int packetCount = 0;
       boolean packetOpened = false;
       for(int i = 0; i<txtRadioPacket.getText().length(); i++){
        if(txtRadioPacket.getText().charAt(i)=='<'){
            System.out.println(i);
            if(packetOpened){
                System.err.println("Unexpected '<' at position " + (i+1)+". The packet must be closed before another one can be opened");
            lblErrorPacketString.setText("Unexpected '<' at position " + (i+1)+". The packet must be closed before another one can be opened");
            return false;
            }
            packetCount++;
            packetOpened = true;
        }
        if(txtRadioPacket.getText().charAt(i)=='>'){
            packetOpened = false;
        }
       }  
       
       if(!(packetCount == (int)spnLength.getValue())){
           System.err.println("The number of packets does not equal the number in the message");
           lblErrorPacketCount.setText("The number of packets does not equal the number in the message");
           return false;
       }
       return true;
   }
    private boolean checkDate(){
        if(dpDateTransmited.getDate().isBefore(LocalDate.of(2008, 04, 22))){
            
            
            
        }
        
        
        return true;
    }
   private void checkPresence(){
       
        
        if(txtRadioPacket.getText().isBlank()){
            lblErrorPacketString.setText("This field cannot be left blank");
        }else if(checkRadioString(txtRadioPacket.getText()) == false){
        }else if(!(balancePackets())){
            
        }else{
                 lblErrorPacketString.setText("");
        }
        
        if((int) spnLength.getValue() == 0){
            lblErrorPacketCount.setText("The packet Length cannot be zero");
        }else if(!(balancePackets())){
        
        }else{
            lblErrorPacketCount.setText("");
        }
        
        if(dpDateTransmited.getDate()== null){
            lblErrorDateTransmitted.setText("The Date cannot be blank");
        }else if(checkDate()){
            
            
        }else{
            lblErrorDateTransmitted.setText("");
        }
        
        if(!rbtnFalse.isSelected() && !rbtnTrue.isSelected()){
         lblErrorScrambled.setText("An option needs to be selected");
        }else{
            lblErrorScrambled.setText("");
        }
   }
    private void txtRadioPacketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRadioPacketActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRadioPacketActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmName.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmName.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmName.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmName.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmName().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnValidate;
    private javax.swing.ButtonGroup btngrpScrambled;
    private com.github.lgooddatepicker.components.DatePicker dpDateTransmited;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblErrorDateTransmitted;
    private javax.swing.JLabel lblErrorPacketCount;
    private javax.swing.JLabel lblErrorPacketString;
    private javax.swing.JLabel lblErrorScrambled;
    private javax.swing.JLabel lblPacketLength;
    private javax.swing.JLabel lblPacketString;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlForm;
    private javax.swing.JRadioButton rbtnFalse;
    private javax.swing.JRadioButton rbtnTrue;
    private javax.swing.JSpinner spnLength;
    private javax.swing.JTextField txtRadioPacket;
    // End of variables declaration//GEN-END:variables
}
